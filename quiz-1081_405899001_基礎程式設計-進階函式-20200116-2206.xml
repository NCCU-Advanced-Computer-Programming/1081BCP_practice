<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 0  -->
  <question type="category">
    <category>
        <text>$course$/1081_405899001_基礎程式設計的預設/進階函式</text>

    </category>
  </question>

<!-- question: 32467  -->
  <question type="coderunner">
    <name>
      <text>完成巢狀函式</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<div class="O1">
<div class="O1">
<div class="O1">
<div class="O1">
<div class="O1">請完成如圖函式，<strong>撰寫全部函式內容</strong>並補上標於註解處缺漏的程式碼，<br /><img src="@@PLUGINFILE@@/ch22_3.png" width="775" height="285" alt="nested function" /><br /> 使其可正確執行出如範例所示結果。</div>
</div>
</div>
</div>
<div class="O1"></div>
</div>]]></text>
<file name="ch22_1.png" path="/" encoding="base64">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</file>
<file name="ch22_3.png" path="/" encoding="base64">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</file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>25.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>2</precheck>
    <showsource>0</showsource>
    <answerboxlines>8</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[def person(age):
    print("I am a person")
    def student(major):
        print("I like learning")
        def vacation(place):
            print("But I need to take breaks")
            print(age, "|", major, "|", place)
        # write a line to return the appropriate function
        return vacation
    # write a line to return the appropriate function
    return student]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>0</hoisttemplateparams>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[person(12)("Math")("beach")]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>I am a person
I like learning
But I need to take breaks
12 | Math | beach</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[person(18)("Communication")("Hawaii")]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>I am a person
I like learning
But I need to take breaks
18 | Communication | Hawaii</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[person(29)("CS")("Japan")]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>I am a person
I like learning
But I need to take breaks
29 | CS | Japan</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[person(23)("Law")("Florida")]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>I am a person
I like learning
But I need to take breaks
23 | Law | Florida</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[person(120)("Life")("Paradise")]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>I am a person
I like learning
But I need to take breaks
120 | Life | Paradise</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 32468  -->
  <question type="coderunner">
    <name>
      <text>撰寫分析好友的函式</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<div class="O1">
<div class="O1">
<div class="O1">
<div class="O1">
<div class="O1">請<strong>撰寫一個函式，名為 analyze_friends</strong>，有四個參數，</div>
<div class="O1">分別是姓名(names)tuple、電話(phones)tuple、區域號碼(all_areacodes)tuple、州名(all_places)tuple，</div>
<div class="O1">其中姓名與電話成對、區碼與州名成對，</div>
<div class="O1"></div>
<div class="O1">請從姓名tuple得出內有多少好友，並用電話前三碼與區碼比對，</div>
<div class="O1">將不重複的州名顯示出如範例所示的結果。</div>
<div class="O1">如發現有電話前三碼無法對應的州名則顯示 'BAD AREACODE'</div>
</div>
</div>
</div>
<div class="O1"></div>
</div>]]></text>
<file name="ch22_1.png" path="/" encoding="base64">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</file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>25.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>2</precheck>
    <showsource>0</showsource>
    <answerboxlines>8</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[areacode_list="""201
New Jersey
202
Washington D.C.
203
Connecticut
204
Canada - Manitoba
205
Alabama
206
Washington
207
Maine
208
Idaho
209
California
210
Texas
212
New York
213
California
214
Texas
215
Pennsylvania
216
Ohio
217
Illinois
218
Minnesota
219
Indiana
220
Ohio
224
Illinois
225
Louisiana
226
Canada - Ontario
228
Mississippi
229
Georgia
231
Michigan
234
Ohio
236
Canada - British Columbia
239
Florida
240
Maryland
242
Bahamas
246
Barbados
248
Michigan
249
Canada - Ontario
250
Canada - British Columbia
251
Alabama
252
North Carolina
253
Washington
254
Texas
256
Alabama
260
Indiana
262
Wisconsin
264
Anguilla
267
Pennsylvania
268
Antigua & Barbuda
269
Michigan
270
Kentucky
272
Pennsylvania
276
Virginia
281
Texas
284
British Virgin Islands
289
Canada - Ontario
Area code
Location
301
Maryland
302
Delaware
303
Colorado
304
West Virginia
305
Florida
306
Canada - Saskatchewan
307
Wyoming
308
Nebraska
309
Illinois
310
California
312
Illinois
313
Michigan
314
Missouri
315
New York
316
Kansas
317
Indiana
318
Louisiana
319
Iowa
320
Minnesota
321
Florida
323
California
325
Texas
330
Ohio
331
Illinois
334
Alabama
336
North Carolina
337
Louisiana
339
Massachusetts
340
US Virgin Islands
343
Canada - Ontario
345
Cayman Islands
346
Texas
347
New York
351
Massachusetts
352
Florida
360
Washington
361
Texas
364
Kentucky
365
Canada - Ontario
380
Ohio
385
Utah
386
Florida
Area code
Location
401
Rhode Island
402
Nebraska
403
Canada - Alberta
404
Georgia
405
Oklahoma
406
Montana
407
Florida
408
California
409
Texas
410
Maryland
412
Pennsylvania
413
Massachusetts
414
Wisconsin
415
California
416
Canada - Ontario
417
Missouri
418
Canada - Quebec
419
Ohio
423
Tennessee
424
California
425
Washington
430
Texas
431
Canada - Manitoba
432
Texas
434
Virginia
435
Utah
437
Canada - Ontario
438
Canada - Quebec
440
Ohio
441
Bermuda
442
California
443
Maryland
450
Canada - Quebec
456
Carrier Services
458
Oregon
469
Texas
470
Georgia
473
Grenada
475
Connecticut
478
Georgia
479
Arkansas
480
Arizona
484
Pennsylvania
Area code
Location
500
Personal Communications Services
501
Arkansas
502
Kentucky
503
Oregon
504
Louisiana
505
New Mexico
506
Canada - New Brunswick
507
Minnesota
508
Massachusetts
509
Washington
510
California
512
Texas
513
Ohio
514
Canada - Quebec
515
Iowa
516
New York
517
Michigan
518
New York
519
Canada - Ontario
520
Arizona
530
California
531
Nebraska
533
Personal Communications Services
534
Wisconsin
539
Oklahoma
540
Virginia
541
Oregon
544
Personal Communications Services
551
New Jersey
559
California
561
Florida
562
California
563
Iowa
566
Personal Communications Services
567
Ohio
570
Pennsylvania
571
Virginia
573
Missouri
574
Indiana
575
New Mexico
577
Personal Communications Services
579
Quebec
580
Oklahoma
581
Quebec
585
New York
586
Michigan
587
Canada - Alberta
Area code
Location
600
Canada only - Non Geographic
601
Mississippi
602
Arizona
603
New Hampshire
604
Canada - British Columbia
605
South Dakota
606
Kentucky
607
New York
608
Wisconsin
609
New Jersey
610
Pennsylvania
612
Minnesota
613
Canada - Ontario
614
Ohio
615
Tennessee
616
Michigan
617
Massachusetts
618
Illinois
619
California
620
Kansas
623
Arizona
626
California
628
California
629
Tennessee
630
Illinois
631
New York
636
Missouri
639
Canada - Saskatchewan
641
Iowa
646
New York
647
Canada - Ontario
649
Turks & Caicos
650
California
651
Minnesota
657
California
660
Missouri
661
California
662
Mississippi
664
Montserrat
667
Maryland
669
California
670
Northern Mariana Isl.
671
Guam
678
Georgia
681
West Virginia
682
Texas
684
American Samoa
Area code
Location
700
Carrier Services
701
North Dakota
702
Nevada
703
Virginia
704
North Carolina
705
Canada - Ontario
706
Georgia
707
California
708
Illinois
709
Canada - Newfoundland
710
US Government
712
Iowa
713
Texas
714
California
715
Wisconsin
716
New York
717
Pennsylvania
718
New York
719
Colorado
720
Colorado
721
Sint Maarten
724
Pennsylvania
725
Nevada
727
Florida
731
Tennessee
732
New Jersey
734
Michigan
740
Ohio
747
California
754
Florida
757
Virginia
758
St. Lucia
760
California
762
Georgia
763
Minnesota
765
Indiana
767
Dominica
769
Mississippi
770
Georgia
772
Florida
773
Illinois
774
Massachusetts
775
Nevada
778
Canada - British Columbia
779
Illinois
780
Canada - Alberta
781
Massachusetts
782
Canada - Nova Scotia/PEI
784
St. Vincent and the Grenadines
785
Kansas
786
Florida
787
Puerto Rico
Area code
Location
800
Toll free
801
Utah
802
Vermont
803
South Carolina
804
Virginia
805
California
806
Texas
807
Canada - Ontario
808
Hawaii
809
Dominican Republic
810
Michigan
812
Indiana
813
Florida
814
Pennsylvania
815
Illinois
816
Missouri
817
Texas
818
California
819
Canada - Quebec
828
North Carolina
829
Dominican Republic
830
Texas
831
California
832
Texas
843
South Carolina
844
Toll free
845
New York
847
Illinois
848
New Jersey
849
Dominican Republic
850
Florida
854
South Carolina
855
Toll free
856
New Jersey
857
Massachusetts
858
California
859
Kentucky
860
Connecticut
862
New Jersey
863
Florida
864
South Carolina
865
Tennessee
866
Toll free
867
Canada - NW Territories Nunavut Yukon
868
Trinidad & Tobago
869
St. Kitts & Nevis
870
Arkansas
872
Illinois
873
Canada - Quebec
876
Jamaica
877
Toll free
878
Pennsylvania
888
Toll free
Area code
Location
900
Pay per call
901
Tennessee
902
Canada - Nova Scotia/PEI
903
Texas
904
Florida
905
Canada - Ontario
906
Michigan
907
Alaska
908
New Jersey
909
California
910
North Carolina
911
Emergency
912
Georgia
913
Kansas
914
New York
915
Texas
916
California
917
New York
918
Oklahoma
919
North Carolina
920
Wisconsin
925
California
928
Arizona
929
New York
930
Indiana
931
Tennessee
936
Texas
937
Ohio
938
Alabama
939
Puerto Rico
940
Texas
941
Florida
947
Michigan
949
California
951
California
952
Minnesota
954
Florida
956
Texas
959
Connecticut
970
Colorado
971
Oregon
972
Texas
973
New Jersey
978
Massachusetts
979
Texas
980
North Carolina
984
North Carolina
985
Louisiana
989
Michigan"""

def read_line(string):
    """
    string, a multi-line string object
    Starting from the first line, it reads every 2 lines
    and stores them in a tuple.
    Starting from the second line, it reads every 2 lines
    and stores them in a tuple.
    Returns a tuple of the two tuples.
    """
    first_every_2 = ()
    second_every_2 = ()
    line_count = 1
    for line in string.splitlines():
        #stripped_line = line.replace("\n", "")
        stripped_line = line.strip()
        if line_count%2 == 1:
            first_every_2 += (stripped_line, )
        elif line_count%2 == 0:
            second_every_2 += (stripped_line, )
        line_count += 1
    return (first_every_2, second_every_2)

{{ STUDENT_ANSWER }}

(areacodes,states)=read_line(areacode_list)

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[def analyze_friends(names, phones, all_areacodes, all_places):
    """
    names, a tuple of friend names
    phones, a tuple of phone numbers without special symbols
    all_areacodes, a tuple of strings for the area codes
    all_places, a tuple of strings for the US states
    Prints out how many friends you have and every unique
    state that is represented by their phone numbers.
    """

    def get_unique_area_codes():
        """
        Returns a tuple of all unique area codes in phones
        """
        area_codes = ()
        for ph in phones:
            if ph[0:3] not in area_codes:
                area_codes += (ph[0:3], )
        return area_codes
 
    def get_states(some_areacodes):
        """
        some_area_codes, a tuple of area codes
        Returns a tuple of the states associated with those area codes
        """
        states = ()
        for ac in some_areacodes:
            if ac not in all_areacodes:
                states += ("BAD AREACODE", )
            else:
                index = all_areacodes.index(ac)
                states += (all_places[index], )
        return states
 
    num_friends = len(names)
    unique_area_codes = get_unique_area_codes()
    unique_states = get_states(unique_area_codes)
    print("You have", num_friends, "friends!")
    print("They live in", unique_states)
]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>0</hoisttemplateparams>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[names=("Ana","Ben","Cory","Danny")
phones=("201456789","203456789","2023452619","2035648765")
analyze_friends(names,phones,areacodes,states)]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>You have 4 friends!
They live in ('New Jersey', 'Connecticut', 'Washington D.C.')</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[names=("Ana","Ben","Cory","Danny")
phones=("201456789","203456789","0003452619","2035648765")
analyze_friends(names,phones,areacodes,states)]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>You have 4 friends!
They live in ('New Jersey', 'Connecticut', 'BAD AREACODE')</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text>names=()
phones=()
analyze_friends(names,phones,areacodes,states)</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>You have 0 friends!
They live in ()</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[names=("Ana","Ben","Cory","Danny")
phones=("301456789","301456789","3013452619","3015648765")
analyze_friends(names,phones,areacodes,states)]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>You have 4 friends!
They live in ('Maryland',)</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[names=("Ana","Ben")
phones=("001456789","002456789")
analyze_friends(names,phones,areacodes,states)]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>You have 2 friends!
They live in ('BAD AREACODE', 'BAD AREACODE')</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 32465  -->
  <question type="coderunner">
    <name>
      <text>計算圓面積或方形面積函式</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<div class="O1">
<div class="O1">
<div class="O1">程式中已定義好如圖兩個函式，分別是計算圓面積(circle)與方形面積(square)的函式，</div>
<div class="O1"><img src="@@PLUGINFILE@@/ch22_1.png" width="354" height="164" /></div>
<div class="O1"><strong>請撰寫一個函式名為 area</strong>，有兩個參數：<br /> 第1個參數：計算面積函式。<br /> 第2個參數：欲傳入計算面積函式的參數，如圓半徑或方形邊長。</div>
<div class="O1"></div>
<div class="O1">area 函式會執行呼叫計算面積函式後並將計算結果傳回，如範例所示。</div>
</div>
<div class="O1"></div>
</div>]]></text>
<file name="ch22_1.png" path="/" encoding="base64">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</file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>25.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>2</precheck>
    <showsource>0</showsource>
    <answerboxlines>8</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[def circle(radius):
    return 3.14*radius**2

def square(length):
    return length**2

{{ STUDENT_ANSWER }}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer>def area(shape, n):
    return shape(n)</answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>0</hoisttemplateparams>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(area(circle,10))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>314.0</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text>print(area(square,5))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>25</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text>print(area(circle,10/2))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>78.5</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text>print(area(square,10))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>100</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text>print(area(circle,4/2))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>12.56</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 32466  -->
  <question type="coderunner">
    <name>
      <text>計算矩形面積或三角形面積函式</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<div class="O1">
<div class="O1">
<div class="O1">
<div class="O1"><strong>本題需撰寫三個函式</strong>，第一個函式名為 area2，有三個參數：<br /> 第1個參數：計算面積函式。<br /> 第2，3個參數：欲傳入計算面積函式的參數，如長與寬或底與高。</div>
<div class="O1">area2 函式需執行呼叫計算面積函式後並將計算結果傳回。</div>
<div class="O1"><br /> 為使 area2 能處理計算矩形面積(rectangle)以及三角形面積(triangle)，需另寫兩個函式分別為：</div>
<div class="O1">rectangle，有兩個參數：長與寬，計算公式為 面積＝長＊寬</div>
<div class="O1">triangle，也有兩個參數：底與高，計算公式為 面積＝底＊高／2<br /> 兩個函式在計算面積後將結果傳回。</div>
</div>
</div>
<div class="O1"></div>
</div>]]></text>
<file name="ch22_1.png" path="/" encoding="base64">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</file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>25.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>2</precheck>
    <showsource>0</showsource>
    <answerboxlines>8</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer>def rectangle(length, width):
    return length*width

def triangle(base,height):
    return base*height/2

def area2(shape, x, y):
    return shape(x, y)
</answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>0</hoisttemplateparams>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(area2(rectangle,3,4))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>12</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text>print(area2(triangle,3,4))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>6.0</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text>print(area2(rectangle,1,2))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>2</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text>print(area2(triangle,1,2))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>1.0</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text>print(area2(rectangle,100,200))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>20000</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

</quiz>